{"version":3,"sources":["components/Todo.js","components/App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","delete","bind","assertThisInitialized","mark","_this$props","todo","deleteTodo","id","_this$props2","markTodo","react_default","a","createElement","key","className","isCompleted","text","role","aria-label","type","concat","onClick","Component","App","state","todos","todoInputText","filter","handleChange","addTodo","handlePress","todoData","window","localStorage","getItem","oldTodos","JSON","parse","setState","length","prevProps","prevState","console","log","setItem","stringify","e","target","value","_this$state","toConsumableArray","_this$state2","map","objectSpread","_this2","_this$state3","name","placeholder","onChange","onKeyPress","clear","components_Todo","href","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aa9a8db.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props)\n        this.delete = this.delete.bind(this)\n        this.mark = this.mark.bind(this)\n    }\n\n    delete() {\n        const { todo, deleteTodo } = this.props\n        deleteTodo(todo.id)\n    }\n\n    mark() {\n        const { todo, markTodo } = this.props\n        markTodo(todo.id)\n    }\n\n    render() {\n        const { todo } = this.props\n        return (\n            <li key={todo.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    {todo.isCompleted ? <del>{todo.text}</del> : todo.text }\n                <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                    <button type=\"button\" className={`btn ${todo.isCompleted ? 'btn-outline-primary' : 'btn-outline-success' }`} onClick={this.mark}>\n                        {todo.isCompleted ? '未完成' : '完成'}\n                    </button>\n                    <button type=\"button\" className=\"btn btn-outline-danger delete\" onClick={this.delete}>刪除</button>\n                </div>\n            </li>\n        ) // return End\n    } //  render End\n} // Todo End\n\nexport default Todo","import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './main.css'\nimport Todo from './Todo'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            todos: [{\n                id: 0,\n                isCompleted: false,\n                text: '選擇未完成的待辦事項！'\n            },\n            {\n                id: 1,\n                isCompleted: true,\n                text: '新增第一筆代辦事項吧！'\n            },\n            {\n                id: 2,\n                isCompleted: false,\n                text: '清空所有代辦事項！'\n            }],\n            todoInputText: '',\n            filter: 'all'\n        }\n        this.id = 3\n        this.handleChange = this.handleChange.bind(this)\n        this.addTodo = this.addTodo.bind(this)\n        this.deleteTodo = this.deleteTodo.bind(this)\n        this.markTodo = this.markTodo.bind(this)\n        this.handlePress = this.handlePress.bind(this)\n    }\n\n    // 將 localStorage 取出來，在初始化(ComponentDidMount)時做這件事情\n    /** 由於清空時，todo 會是 []，但會因為存在 localStorage 但 id 是 undefined 而出錯，故加上 todoData !== '[]' 作為判斷 */\n    componentDidMount() {\n        const todoData = window.localStorage.getItem('todoApp')\n        if(todoData && todoData !== '[]') {\n            const oldTodos = JSON.parse(todoData)\n            this.setState({\n                todos: oldTodos,\n            })\n            this.id = oldTodos[oldTodos.length - 1].id + 1\n        }\n    }\n\n    // 生命週期的更新狀態時，判斷 todo 有沒有改變，如果有的話，將最新的 todo 存儲在 localStorage\n    componentDidUpdate(prevProps, prevState) {\n        console.log('prevProps', prevProps)\n        console.log('prevState', prevState)\n        if(prevState.todos !== this.state.todos !== []) {\n            window.localStorage.setItem('todoApp', JSON.stringify(this.state.todos))\n        } \n    }\n\n    // 處理 input 輸入的文字\n    handleChange(e) {\n        this.setState({\n            todoInputText: e.target.value\n        })\n    }\n\n    // Add New To-Do 按鈕點擊後執行\n    addTodo() {\n        const { todoInputText, todos } = this.state\n        if(!todoInputText) return\n        this.setState({\n            // 解構\n            todos: [...todos, {\n                // 新增的資料\n                id: this.id,\n                isCompleted: false,\n                text: todoInputText\n            }],\n            // 清空 input\n            todoInputText: ''\n        })\n        this.id++\n    }\n\n    // 按下 enter 處理\n    handlePress(e) {\n        if(e.key === 'Enter') {\n            // console.log(e.target instanceof HTMLInputElement)\n            const { todoInputText, todos } = this.state\n            if(!todoInputText) return\n            this.setState({\n                // 解構\n                todos: [...todos, {\n                    // 新增的資料\n                    id: this.id,\n                    isCompleted: false,\n                    text: todoInputText\n                }],\n                // 清空 input\n                todoInputText: ''\n            })\n            this.id++\n        }\n    }\n\n    // 刪除\n    deleteTodo(id) {\n        this.setState({\n            todos: this.state.todos.filter(todo => todo.id !== id)\n        })\n    }\n\n    markTodo(id) {\n        this.setState({\n            todos: this.state.todos.map(todo => {\n                if(todo.id !== id) {\n                    return todo\n                }\n\n                return {\n                    ...todo,\n                    isCompleted: !todo.isCompleted\n                }\n            })\n        })\n    }\n\n    render() {\n        const { todos, todoInputText, filter} = this.state\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col card card-body\">\n                        <div className=\"col card card-body p1\"></div>\n                        <div className=\"col card card-body p2\"></div>\n                        <div className=\"input-group\">\n                            <input type=\"text\" name=\"todo\" className=\"form-control add-todo\" placeholder=\"新增代辦事項\" \n                            value={todoInputText}\n                            onChange={this.handleChange}\n                            onKeyPress={this.handlePress}\n                            />\n                            <div className=\"input-group-append\">\n                                <button className=\"btn btn-outline-secondary addBtn add-todo\" type=\"button\" onClick={this.addTodo}>Add New To-Do</button>\n                            </div>\n                        </div>\n                        <div className=\"btn-group btn_group\">\n                            <button className=\"btn btn-outline-success btn-block done\" type=\"button\" onClick={()=> {\n                                this.setState({\n                                    filter: 'all'\n                                })\n                            } }>全部</button>\n                            <button className=\"btn btn-outline-primary btn-block undone\" type=\"button\" onClick={() => {\n                                this.setState({\n                                    filter: 'completed'\n                                })\n                            }}>未完成</button>\n                            <button className=\"btn btn-outline-danger btn-block clear\" type=\"button\" onClick={() => {\n                                // 清空資料\n                                this.setState({\n                                    todos: []\n                                })\n                                window.localStorage.clear()\n                            }}>清空</button>\n                        </div>\n                        <ul className=\"list-group list-group-flush todo_list\">\n                        {/* <!-- todo 插入的地方 --> */}\n\n                        {todos\n                            .filter(todo => filter === 'completed' ? todo.isCompleted : true)\n                            .map(todo => (\n                                <Todo \n                                key={todo.id} \n                                todo={todo} \n                                deleteTodo={this.deleteTodo} \n                                markTodo={this.markTodo}\n                                />\n                        ))}\n\n                        {/* <!-- 結尾 --> */}\n\n{/* example */}\n{/* <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n今晚打老虎\n    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n        <button type=\"button\" className=\"btn btn-outline-success\">完成\n        </button>\n        <button type=\"button\" className=\"btn btn-outline-danger delete\">刪除</button>\n    </div>\n</li> */}\n{/*  */}\n                        </ul>\n                    </div>\n                </div>\n                <footer className=\"info\">\n                    <a href=\"https://github.com/Lidemy/mentor-program-2nd\" target=\"blank\">Mentor Program 2nd</a>, created by <a href=\"https://github.com/enter3017sky?tab=repositories\" target=\"blank\">enter3017sky\n                    </a>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}